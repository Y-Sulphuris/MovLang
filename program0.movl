#include inc

#rule implicit_seg 1

#segment S FF
#segment 0 FFFF
#segment R FFFF
#segment C FFFF

hello:
inc S[0]
C[S[0]] 'H'
inc S[0]
C[S[0]] 'e'
inc S[0]
C[S[0]] 'l'
inc S[0]
C[S[0]] 'l'
inc S[0]
C[S[0]] 'o'
inc S[0]

C[S[0]] 'W'
inc S[0]
C[S[0]] 'o'
inc S[0]
C[S[0]] 'r'
inc S[0]
C[S[0]] 'l'
inc S[0]
C[S[0]] 'd'
inc S[0]
C[S[0]] '!'
inc S[0]
C[S[0]] ' '
inc S[0]
C[S[0]] ' '
inc S[0]

//0[0] C[S[0] + 0B]
//0[1] 0 : 3
//C[S[0]] 0[inc_table + R[0]]
//S[0] 0[inc_table + S[0]]
// C[S[0] + 0B] 0[inc_table + R[0] : 1]

#macro el #b1# #b2#
#unfolds
C[#b1#] '/'
C[#b2#] '\\'
#end_macro


el 100 101
el 102 103
el 104 105
el 106 107
el 108 109
el 10A 10B
el 10C 10D
el 10E 10F

el 110 111
el 112 113
el 114 115
el 116 117
el 118 119
el 11A 11B
el 11C 11D
el 11E 11F

el 120 121
el 122 123
el 124 125
el 126 127
el 128 129
el 12A 12B
el 12C 12D
el 12E 12F

el 130 131
el 132 133
el 134 135
el 136 137
el 138 139
el 13A 13B
el 13C 13D
el 13E 13F

E[0] @hello

// todo:
//J[1a04+^1] _15 :^4 // move 15 with size = 4 bits to address 1a04 in segment 'J' with bit offset 1
// (now this address is filled with _****___, where _ means old value)
